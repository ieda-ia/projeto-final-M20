const express = require('express');
const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     CalculoIMCRequest:
 *       type: object
 *       required:
 *         - peso
 *         - altura
 *         - idade
 *       properties:
 *         nomeUsuario:
 *           type: string
 *           description: Nome do usu√°rio (obrigat√≥rio apenas se gerarTreino for true)
 *           minLength: 2
 *           maxLength: 50
 *         peso:
 *           type: number
 *           description: Peso em quilogramas
 *           minimum: 20
 *           maximum: 300
 *         altura:
 *           type: number
 *           description: Altura em metros
 *           minimum: 0.5
 *           maximum: 3.0
 *         idade:
 *           type: number
 *           description: Idade em anos
 *           minimum: 10
 *           maximum: 100
 *         gerarTreino:
 *           type: boolean
 *           description: Se true, gera tamb√©m um treino personalizado baseado no IMC
 *           default: false
 *     
 *     ResultadoIMC:
 *       type: object
 *       properties:
 *         imc:
 *           type: number
 *           description: Valor calculado do IMC
 *         classificacao:
 *           type: string
 *           description: Classifica√ß√£o do IMC
 *         status:
 *           type: string
 *           description: Status de sa√∫de baseado no IMC
 *         recomendacoes:
 *           type: array
 *           items:
 *             type: string
 *           description: Lista de recomenda√ß√µes de exerc√≠cios
 *         exerciciosRecomendados:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               categoria:
 *                 type: string
 *               exercicios:
 *                 type: array
 *                 items:
 *                   type: string
 *               intensidade:
 *                 type: string
 *               observacoes:
 *                 type: string
 *         treinoPersonalizado:
 *           type: object
 *           description: Treino gerado baseado no IMC (se solicitado)
 *           nullable: true
 */

/**
 * @swagger
 * /api/imc/calcular:
 *   post:
 *     summary: Calcula o IMC e fornece recomenda√ß√µes
 *     description: Calcula o √çndice de Massa Corporal e fornece recomenda√ß√µes personalizadas de exerc√≠cios. Pode gerar treino personalizado baseado no resultado.
 *     tags: [IMC]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CalculoIMCRequest'
 *     responses:
 *       200:
 *         description: IMC calculado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 resultado:
 *                   $ref: '#/components/schemas/ResultadoIMC'
 *       400:
 *         description: Dados inv√°lidos
 *       500:
 *         description: Erro interno do servidor
 */
router.post('/calcular', (req, res) => {
  const { nomeUsuario, peso, altura, idade, gerarTreino } = req.body;

  // Valida√ß√£o dos campos obrigat√≥rios
  if (!peso || !altura || !idade) {
    return res.status(400).json({
      success: false,
      message: 'Peso, altura e idade s√£o obrigat√≥rios.'
    });
  }

  // Calcule o IMC e a classifica√ß√£o ANTES de usar em qualquer bloco
  const imc = calcularIMC(peso, altura);
  const classificacao = classificarIMC(imc);
  const status = determinarStatus(imc, idade);
  const recomendacoes = gerarRecomendacoes(imc, idade);

  const resultadoIMC = {
    imc: Math.round(imc * 100) / 100,
    classificacao,
    status,
    recomendacoes
  };

  // Se gerarTreino for true, nomeUsuario √© obrigat√≥rio
  if (gerarTreino === true) {
    if (
      !nomeUsuario ||
      typeof nomeUsuario !== 'string' ||
      nomeUsuario.trim().length < 2 ||
      nomeUsuario.trim().length > 50
    ) {
      return res.status(400).json({
        success: false,
        message: 'Nome do usu√°rio √© obrigat√≥rio para gerar treino personalizado e deve ter entre 2 e 50 caracteres.'
      });
    }
    // Use a fun√ß√£o correta para gerar treino por IMC
    const treino = gerarTreinoPorIMC(nomeUsuario.trim(), classificacao, idade);
    return res.json({
      success: true,
      message: `üéØ IMC calculado e treino personalizado gerado para ${nomeUsuario.trim()}!`,
      resultadoIMC,
      treino
    });
  }

  // Caso contr√°rio, retorna s√≥ o c√°lculo do IMC e recomenda√ß√µes
  return res.json({
    success: true,
    message: '‚úÖ IMC calculado com sucesso!',
    resultadoIMC
  });
});

/**
 * @swagger
 * /api/imc/classificacoes:
 *   get:
 *     summary: Retorna as classifica√ß√µes de IMC
 *     description: Lista todas as classifica√ß√µes poss√≠veis de IMC com suas descri√ß√µes
 *     tags: [IMC]
 *     responses:
 *       200:
 *         description: Classifica√ß√µes retornadas com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 classificacoes:
 *                   type: object
 */
router.get('/classificacoes', (req, res) => {
  try {
    const classificacoes = {
      'Abaixo do peso': {
        range: '< 18.5',
        descricao: 'Peso abaixo do recomendado para a altura',
        risco: 'Baixo',
        cor: 'üîµ',
        recomendacao: 'Foque em exerc√≠cios de for√ßa para ganhar massa muscular'
      },
      'Peso normal': {
        range: '18.5 - 24.9',
        descricao: 'Peso saud√°vel para a altura',
        risco: 'Muito baixo',
        cor: 'üü¢',
        recomendacao: 'Mantenha uma rotina equilibrada de exerc√≠cios'
      },
      'Sobrepeso': {
        range: '25.0 - 29.9',
        descricao: 'Peso acima do recomendado para a altura',
        risco: 'Baixo',
        cor: 'üü°',
        recomendacao: 'Comece com exerc√≠cios de baixo impacto e aumente gradualmente'
      },
      'Obesidade Grau I': {
        range: '30.0 - 34.9',
        descricao: 'Obesidade leve',
        risco: 'Moderado',
        cor: 'üü†',
        recomendacao: 'Foque em exerc√≠cios de cardio e consulte um profissional'
      },
      'Obesidade Grau II': {
        range: '35.0 - 39.9',
        descricao: 'Obesidade moderada',
        risco: 'Alto',
        cor: 'üî¥',
        recomendacao: 'Exerc√≠cios de baixo impacto e orienta√ß√£o m√©dica obrigat√≥ria'
      },
      'Obesidade Grau III': {
        range: '‚â• 40.0',
        descricao: 'Obesidade grave',
        risco: 'Muito alto',
        cor: '‚ö´',
        recomendacao: 'Sempre consulte um m√©dico antes de iniciar exerc√≠cios'
      }
    };

    res.json({
      success: true,
      message: 'üìã Classifica√ß√µes de IMC',
      classificacoes
    });
  } catch (error) {
    console.error('Erro ao retornar classifica√ß√µes:', error);
    res.status(500).json({
      error: '‚ùå Erro interno do servidor',
      message: 'N√£o foi poss√≠vel retornar as classifica√ß√µes'
    });
  }
});

// Fun√ß√£o para calcular IMC
function calcularIMC(peso, altura) {
  return peso / (altura * altura);
}

// Fun√ß√£o para classificar IMC
function classificarIMC(imc) {
  if (imc < 18.5) return 'Abaixo do peso';
  if (imc < 25) return 'Peso normal';
  if (imc < 30) return 'Sobrepeso';
  if (imc < 35) return 'Obesidade Grau I';
  if (imc < 40) return 'Obesidade Grau II';
  return 'Obesidade Grau III';
}

// Fun√ß√£o para determinar status de sa√∫de
function determinarStatus(imc, idade) {
  if (imc < 18.5) {
    return idade < 18 ? 'Aten√ß√£o: Consulte um profissional de sa√∫de' : 'Considere ganhar peso de forma saud√°vel';
  } else if (imc < 25) {
    return 'Excelente! Mantenha seus h√°bitos saud√°veis';
  } else if (imc < 30) {
    return 'Aten√ß√£o: Considere ajustar sua alimenta√ß√£o e aumentar a atividade f√≠sica';
  } else {
    return 'Importante: Consulte um profissional de sa√∫de para orienta√ß√£o personalizada';
  }
}

// Fun√ß√£o para gerar recomenda√ß√µes gerais
function gerarRecomendacoes(imc, idade) {
  const recomendacoes = [];

  if (imc < 18.5) {
    recomendacoes.push(
      'üí™ Foque em exerc√≠cios de for√ßa para ganhar massa muscular',
      'ü•ó Aumente o consumo de prote√≠nas e carboidratos complexos',
      'üèãÔ∏è‚Äç‚ôÇÔ∏è Considere treinos com pesos moderados',
      'üìä Monitore seu progresso semanalmente'
    );
  } else if (imc < 25) {
    recomendacoes.push(
      'üéØ Mantenha uma rotina equilibrada de exerc√≠cios',
      'üèÉ‚Äç‚ôÇÔ∏è Combine cardio, for√ßa e flexibilidade',
      'ü•ó Mantenha uma alimenta√ß√£o balanceada',
      'üíß Mantenha-se hidratado durante os treinos'
    );
  } else if (imc < 30) {
    recomendacoes.push(
      'üö∂‚Äç‚ôÇÔ∏è Comece com exerc√≠cios de baixo impacto',
      '‚è∞ Aumente gradualmente a dura√ß√£o dos treinos',
      'ü•ó Foque em uma alimenta√ß√£o mais equilibrada',
      'üì± Use apps para monitorar sua atividade f√≠sica'
    );
  } else {
    recomendacoes.push(
      'üë®‚Äç‚öïÔ∏è Consulte um m√©dico antes de iniciar exerc√≠cios',
      'üö∂‚Äç‚ôÇÔ∏è Comece com caminhadas leves',
      'üèä‚Äç‚ôÇÔ∏è Considere exerc√≠cios na √°gua (nata√ß√£o, hidrogin√°stica)',
      'ü•ó Busque orienta√ß√£o nutricional profissional'
    );
  }

  if (idade > 50) {
    recomendacoes.push(
      'üßò‚Äç‚ôÇÔ∏è Inclua exerc√≠cios de equil√≠brio e flexibilidade',
      'üí™ Mantenha a massa muscular com exerc√≠cios de for√ßa',
      'üè• Fa√ßa check-ups regulares com seu m√©dico'
    );
  }

  return recomendacoes;
}

// Fun√ß√£o para gerar exerc√≠cios recomendados
function gerarExerciciosRecomendados(imc, idade) {
  const exercicios = [];

  if (imc < 18.5) {
    exercicios.push({
      categoria: 'For√ßa',
      exercicios: ['Agachamento', 'Flex√£o de bra√ßo', 'Prancha', 'Levantamento terra'],
      intensidade: 'Moderada a alta',
      observacoes: 'Foque em exerc√≠cios compostos para ganhar massa muscular'
    });
    exercicios.push({
      categoria: 'Cardio',
      exercicios: ['Caminhada', 'Ciclismo leve', 'Nata√ß√£o'],
      intensidade: 'Baixa a moderada',
      observacoes: 'Mantenha cardio leve para n√£o queimar muitas calorias'
    });
  } else if (imc < 25) {
    exercicios.push({
      categoria: 'For√ßa',
      exercicios: ['Agachamento', 'Flex√£o de bra√ßo', 'Prancha', 'Burpee'],
      intensidade: 'Moderada',
      observacoes: 'Mantenha um equil√≠brio entre for√ßa e resist√™ncia'
    });
    exercicios.push({
      categoria: 'Cardio',
      exercicios: ['Corrida', 'Ciclismo', 'Polichinelo', 'Mountain climber'],
      intensidade: 'Moderada',
      observacoes: 'Varie entre diferentes tipos de cardio'
    });
  } else if (imc < 30) {
    exercicios.push({
      categoria: 'For√ßa',
      exercicios: ['Agachamento com apoio', 'Flex√£o de joelhos', 'Prancha modificada'],
      intensidade: 'Baixa a moderada',
      observacoes: 'Comece com exerc√≠cios b√°sicos e evolua gradualmente'
    });
    exercicios.push({
      categoria: 'Cardio',
      exercicios: ['Caminhada', 'Marcha no lugar', 'Ciclismo leve'],
      intensidade: 'Baixa',
      observacoes: 'Foque em exerc√≠cios de baixo impacto'
    });
  } else {
    exercicios.push({
      categoria: 'Mobilidade',
      exercicios: ['Alongamentos leves', 'Marcha no lugar', 'Exerc√≠cios sentado'],
      intensidade: 'Muito baixa',
      observacoes: 'Sempre consulte um profissional antes de iniciar'
    });
  }

  exercicios.push({
    categoria: 'Flexibilidade',
    exercicios: ['Alongamento de panturrilha', 'Alongamento de quadr√≠ceps', 'Alongamento de ombro'],
    intensidade: 'Baixa',
    observacoes: 'Importante para todas as faixas et√°rias e n√≠veis de condicionamento'
  });

  return exercicios;
}

// Fun√ß√£o para gerar treino baseado no IMC (importada do m√≥dulo de treinos)
function gerarTreinoPorIMC(nomeUsuario, classificacaoIMC, idade) {
  // Importar configura√ß√µes necess√°rias
  const { configuracoesTreinoIMC, duracoesTreinoIMC, exercicios } = require('../data/exercicios');
  
  const config = configuracoesTreinoIMC[classificacaoIMC];
  const duracao = duracoesTreinoIMC[classificacaoIMC];
  
  const treino = {
    id: `treino_imc_${Date.now()}`,
    nomeUsuario,
    objetivo: config.objetivo,
    nivel: config.nivel,
    classificacaoIMC,
    duracaoTotal: duracao.cardio + duracao.forca + duracao.flexibilidade,
    exercicios: [],
    dataCriacao: new Date().toISOString(),
    observacao: `Treino personalizado baseado no IMC: ${classificacaoIMC}`
  };

  // Adicionar exerc√≠cios de cardio
  if (duracao.cardio > 0) {
    const numExerciciosCardio = Math.max(1, Math.floor(config.cardio * 3));
    const exerciciosCardio = selecionarExerciciosAleatorios('cardio', config.nivel, numExerciciosCardio);
    treino.exercicios.push({
      categoria: 'Cardio',
      duracao: duracao.cardio,
      exercicios: exerciciosCardio
    });
  }

  // Adicionar exerc√≠cios de for√ßa
  if (duracao.forca > 0) {
    const numExerciciosForca = Math.max(1, Math.floor(config.forca * 4));
    const exerciciosForca = selecionarExerciciosAleatorios('forca', config.nivel, numExerciciosForca);
    treino.exercicios.push({
      categoria: 'For√ßa',
      duracao: duracao.forca,
      exercicios: exerciciosForca
    });
  }

  // Adicionar exerc√≠cios de flexibilidade
  const numExerciciosFlex = Math.max(1, Math.floor(config.flexibilidade * 2));
  const exerciciosFlex = selecionarExerciciosAleatorios('flexibilidade', config.nivel, numExerciciosFlex);
  treino.exercicios.push({
    categoria: 'Flexibilidade',
    duracao: duracao.flexibilidade,
    exercicios: exerciciosFlex
  });

  return treino;
}

// Fun√ß√£o para selecionar exerc√≠cios aleat√≥rios
function selecionarExerciciosAleatorios(categoria, nivel, quantidade) {
  const { exercicios } = require('../data/exercicios');
  const exerciciosDisponiveis = exercicios[categoria][nivel];
  const exerciciosSelecionados = [];
  
  // Embaralhar array de exerc√≠cios
  const exerciciosEmbaralhados = [...exerciciosDisponiveis].sort(() => Math.random() - 0.5);
  
  // Selecionar a quantidade solicitada
  for (let i = 0; i < Math.min(quantidade, exerciciosEmbaralhados.length); i++) {
    exerciciosSelecionados.push(exerciciosEmbaralhados[i]);
  }
  
  return exerciciosSelecionados;
}

// Fun√ß√£o para lidar com o c√°lculo do IMC no frontend
async function handleCalcularIMC(event) {
  event.preventDefault();

  // Obtenha os valores do formul√°rio
  const peso = parseFloat(document.getElementById('peso').value);
  const altura = parseFloat(document.getElementById('altura').value);
  const idade = parseInt(document.getElementById('idade').value);
  const gerarTreino = document.getElementById('gerarTreino').checked; // Supondo um checkbox
  const nomeUsuario = document.getElementById('nomeUsuario').value;

  // Valida√ß√£o b√°sica
  if (!peso || !altura || !idade) {
    showError('Preencha peso, altura e idade.');
    return;
  }

  // Monta o corpo da requisi√ß√£o
  const body = {
    peso,
    altura,
    idade
  };
  if (gerarTreino) {
    body.gerarTreino = true;
    if (nomeUsuario && nomeUsuario.trim().length > 0) {
      body.nomeUsuario = nomeUsuario.trim();
    } else {
      showError('Informe o nome para gerar treino personalizado.');
      return;
    }
  }

  // Envia a requisi√ß√£o
  try {
    const response = await fetch('/api/imc/calcular', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    const data = await response.json();

    if (!response.ok) {
      showError(data.message || 'Erro ao calcular IMC.');
      return;
    }

    // Exibe resultado IMC
    displayIMCResult(data.resultadoIMC);

    // Se veio treino, exibe tamb√©m
    if (data.treino) {
      displayTreinoIMC(data.treino, body.nomeUsuario);
    }

  } catch (err) {
    showError('Erro de conex√£o com a API.');
  }
}

module.exports = router;